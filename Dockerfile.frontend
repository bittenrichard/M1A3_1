# Estágio 1: Construção da aplicação com Node.js
# --- CORREÇÃO FINAL, DEFINITIVA E ROBUSTA ---
# DOCUMENTAÇÃO: Nós abandonamos as imagens 'alpine' e 'slim' para o estágio de build.
# Adotamos a imagem completa 'node:20', baseada na versão full do Debian.
# Esta imagem contém TODAS as bibliotecas e ferramentas de build necessárias,
# eliminando completamente a causa raiz do erro do Rollup, que é a falta de
# compatibilidade ou de alguma dependência de sistema nos ambientes mínimos.
# Esta é a abordagem mais segura para garantir um build consistente.
FROM node:20 AS build-stage

# Define o diretório de trabalho dentro do contêiner.
WORKDIR /app

# Copia os arquivos de definição de pacotes.
COPY package*.json ./

# Usamos 'npm ci' por ser a melhor prática para builds reprodutíveis.
# No ambiente completo do node:20, ele funcionará sem problemas.
RUN npm ci

# Copia todo o resto do código do projeto para o contêiner.
COPY . .

# Comando para compilar o projeto para produção.
RUN npm run build

# Estágio 2: Servidor de produção com Nginx
# Aqui mantemos a imagem 'nginx:alpine' por ser extremamente leve,
# já que ela só precisa servir os arquivos estáticos já compilados.
# O tamanho da imagem final permanece otimizado.
FROM nginx:alpine AS production-stage

# Copia os arquivos estáticos gerados no estágio de build (a pasta 'dist').
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Copia a configuração personalizada do Nginx.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expõe a porta 80 para o tráfego externo.
EXPOSE 80

# Comando para iniciar o servidor Nginx.
CMD ["nginx", "-g", "daemon off;"]